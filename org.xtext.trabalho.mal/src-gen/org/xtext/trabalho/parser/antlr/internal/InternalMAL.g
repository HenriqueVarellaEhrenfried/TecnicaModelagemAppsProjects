/*
 * generated by Xtext 2.12.0
 */
grammar InternalMAL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.trabalho.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.trabalho.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.trabalho.services.MALGrammarAccess;

}

@parser::members {

 	private MALGrammarAccess grammarAccess;

    public InternalMALParser(TokenStream input, MALGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MALGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getElementsStatementParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"org.xtext.trabalho.MAL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getModuleStmtParserRuleCall_0_0());
			}
			this_ModuleStmt_0=ruleModuleStmt
			{
				$current = $this_ModuleStmt_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getHelpHelpinfoParserRuleCall_0_1_0());
					}
					lv_help_1_0=ruleHelpinfo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"help",
							lv_help_1_0,
							"org.xtext.trabalho.MAL.Helpinfo");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_1_0());
			}
			this_Definition_2=ruleDefinition
			{
				$current = $this_Definition_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getHelpHelpinfoParserRuleCall_1_1_0());
					}
					lv_help_3_0=ruleHelpinfo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"help",
							lv_help_3_0,
							"org.xtext.trabalho.MAL.Helpinfo");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIncludeStmtParserRuleCall_2());
		}
		this_IncludeStmt_4=ruleIncludeStmt
		{
			$current = $this_IncludeStmt_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStmtParserRuleCall_3());
		}
		this_Stmt_5=ruleStmt
		{
			$current = $this_Stmt_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModuleStmt
entryRuleModuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleStmtRule()); }
	iv_ruleModuleStmt=ruleModuleStmt
	{ $current=$iv_ruleModuleStmt.current; }
	EOF;

// Rule ModuleStmt
ruleModuleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='MODULE'
			{
				newLeafNode(otherlv_0, grammarAccess.getModuleStmtAccess().getMODULEKeyword_0_0());
			}
			(
				(
					lv_ident_1_0=RULE_ID
					{
						newLeafNode(lv_ident_1_0, grammarAccess.getModuleStmtAccess().getIdentIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModuleStmtRule());
						}
						setWithLastConsumed(
							$current,
							"ident",
							lv_ident_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_2='ATOM'
			{
				newLeafNode(otherlv_2, grammarAccess.getModuleStmtAccess().getATOMKeyword_1_0());
			}
			(
				(
					lv_ident_3_0=RULE_ID
					{
						newLeafNode(lv_ident_3_0, grammarAccess.getModuleStmtAccess().getIdentIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModuleStmtRule());
						}
						setWithLastConsumed(
							$current,
							"ident",
							lv_ident_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getModuleStmtAccess().getColonKeyword_1_2_0());
				}
				(
					(
						lv_ident_5_0=RULE_ID
						{
							newLeafNode(lv_ident_5_0, grammarAccess.getModuleStmtAccess().getIdentIDTerminalRuleCall_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleStmtRule());
							}
							setWithLastConsumed(
								$current,
								"ident",
								lv_ident_5_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleIncludeStmt
entryRuleIncludeStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeStmtRule()); }
	iv_ruleIncludeStmt=ruleIncludeStmt
	{ $current=$iv_ruleIncludeStmt.current; }
	EOF;

// Rule IncludeStmt
ruleIncludeStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='INCLUDE'
			{
				newLeafNode(otherlv_0, grammarAccess.getIncludeStmtAccess().getINCLUDEKeyword_0_0());
			}
			(
				(
					lv_identifier_1_0=RULE_ID
					{
						newLeafNode(lv_identifier_1_0, grammarAccess.getIncludeStmtAccess().getIdentifierIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncludeStmtRule());
						}
						setWithLastConsumed(
							$current,
							"identifier",
							lv_identifier_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_2='INCLUDE'
			{
				newLeafNode(otherlv_2, grammarAccess.getIncludeStmtAccess().getINCLUDEKeyword_1_0());
			}
			(
				(
					lv_string_literal_3_0=RULE_ID
					{
						newLeafNode(lv_string_literal_3_0, grammarAccess.getIncludeStmtAccess().getString_literalIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncludeStmtRule());
						}
						setWithLastConsumed(
							$current,
							"string_literal",
							lv_string_literal_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='UNSAFE'
				{
					newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_0_0());
				}
			)?
			otherlv_1='COMMAND'
			{
				newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getCOMMANDKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getDefinitionAccess().getHeaderParserRuleCall_0_2());
			}
			this_Header_2=ruleHeader
			{
				$current = $this_Header_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3='ADDRESS'
			{
				newLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getADDRESSKeyword_0_3());
			}
			(
				(
					lv_identifier_4_0=RULE_ID
					{
						newLeafNode(lv_identifier_4_0, grammarAccess.getDefinitionAccess().getIdentifierIDTerminalRuleCall_0_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefinitionRule());
						}
						setWithLastConsumed(
							$current,
							"identifier",
							lv_identifier_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				otherlv_5='UNSAFE'
				{
					newLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_1_0());
				}
			)?
			otherlv_6='PATTERN'
			{
				newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getPATTERNKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getDefinitionAccess().getHeaderParserRuleCall_1_2());
			}
			this_Header_7=ruleHeader
			{
				$current = $this_Header_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8='ADDRESS'
			{
				newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getADDRESSKeyword_1_3());
			}
			(
				(
					lv_identifier_9_0=RULE_ID
					{
						newLeafNode(lv_identifier_9_0, grammarAccess.getDefinitionAccess().getIdentifierIDTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefinitionRule());
						}
						setWithLastConsumed(
							$current,
							"identifier",
							lv_identifier_9_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				otherlv_10='INLINE'
				{
					newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getINLINEKeyword_2_0_0());
				}
				    |
				otherlv_11='UNSAFE'
				{
					newLeafNode(otherlv_11, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_2_0_1());
				}
			)?
			otherlv_12='FUNCTION'
			{
				newLeafNode(otherlv_12, grammarAccess.getDefinitionAccess().getFUNCTIONKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getDefinitionAccess().getHeaderParserRuleCall_2_2());
			}
			this_Header_13=ruleHeader
			{
				$current = $this_Header_13.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getStmStatementParserRuleCall_2_3_0());
					}
					lv_stm_14_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"stm",
							lv_stm_14_0,
							"org.xtext.trabalho.MAL.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_15='END'
			{
				newLeafNode(otherlv_15, grammarAccess.getDefinitionAccess().getENDKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getNameNameParserRuleCall_2_5_0());
					}
					lv_name_16_0=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"name",
							lv_name_16_0,
							"org.xtext.trabalho.MAL.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_17='FACTORY'
			{
				newLeafNode(otherlv_17, grammarAccess.getDefinitionAccess().getFACTORYKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getDefinitionAccess().getHeaderParserRuleCall_3_1());
			}
			this_Header_18=ruleHeader
			{
				$current = $this_Header_18.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getStmStatementParserRuleCall_3_2_0());
					}
					lv_stm_19_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"stm",
							lv_stm_19_0,
							"org.xtext.trabalho.MAL.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_20='END'
			{
				newLeafNode(otherlv_20, grammarAccess.getDefinitionAccess().getENDKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getNameNameParserRuleCall_3_4_0());
					}
					lv_name_21_0=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"name",
							lv_name_21_0,
							"org.xtext.trabalho.MAL.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleHelpinfo
entryRuleHelpinfo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHelpinfoRule()); }
	iv_ruleHelpinfo=ruleHelpinfo
	{ $current=$iv_ruleHelpinfo.current; }
	EOF;

// Rule Helpinfo
ruleHelpinfo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='COMMENT'
		{
			newLeafNode(otherlv_0, grammarAccess.getHelpinfoAccess().getCOMMENTKeyword_0());
		}
		(
			(
				lv_string_literal_1_0=RULE_ID
				{
					newLeafNode(lv_string_literal_1_0, grammarAccess.getHelpinfoAccess().getString_literalIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHelpinfoRule());
					}
					setWithLastConsumed(
						$current,
						"string_literal",
						lv_string_literal_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	iv_ruleHeader=ruleHeader
	{ $current=$iv_ruleHeader.current; }
	EOF;

// Rule Header
ruleHeader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHeaderAccess().getNameParserRuleCall_0());
		}
		this_Name_0=ruleName
		{
			$current = $this_Name_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getHeaderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderAccess().getParamParamsParserRuleCall_2_0());
				}
				lv_param_2_0=ruleParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderRule());
					}
					set(
						$current,
						"param",
						lv_param_2_0,
						"org.xtext.trabalho.MAL.Params");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getHeaderAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderAccess().getResultResultParserRuleCall_4_0());
				}
				lv_result_4_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderRule());
					}
					set(
						$current,
						"result",
						lv_result_4_0,
						"org.xtext.trabalho.MAL.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNameAccess().getMnModuleNameParserRuleCall_0_0_0_0());
						}
						lv_mn_0_0=ruleModuleName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNameRule());
							}
							add(
								$current,
								"mn",
								lv_mn_0_0,
								"org.xtext.trabalho.MAL.ModuleName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='.'
				{
					newLeafNode(otherlv_1, grammarAccess.getNameAccess().getFullStopKeyword_0_0_1());
				}
			)*
			(
				(
					lv_id_2_0=RULE_ID
					{
						newLeafNode(lv_id_2_0, grammarAccess.getNameAccess().getIdIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNameRule());
						}
						setWithLastConsumed(
							$current,
							"id",
							lv_id_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				lv_id_3_0=RULE_ID
				{
					newLeafNode(lv_id_3_0, grammarAccess.getNameAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeNameParserRuleCall_0());
		}
		this_TypeName_0=ruleTypeName
		{
			$current = $this_TypeName_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getResultAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getResultAccess().getParamsParserRuleCall_1_1());
			}
			this_Params_2=ruleParams
			{
				$current = $this_Params_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getResultAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	iv_ruleParams=ruleParams
	{ $current=$iv_ruleParams.current; }
	EOF;

// Rule Params
ruleParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParamsAccess().getBindingParserRuleCall_0());
		}
		this_Binding_0=ruleBinding
		{
			$current = $this_Binding_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParamsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParamsAccess().getBindBindingParserRuleCall_1_1_0());
					}
					lv_bind_2_0=ruleBinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamsRule());
						}
						set(
							$current,
							"bind",
							lv_bind_2_0,
							"org.xtext.trabalho.MAL.Binding");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_ruleBinding=ruleBinding
	{ $current=$iv_ruleBinding.current; }
	EOF;

// Rule Binding
ruleBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_identifier_0_0=RULE_ID
				{
					newLeafNode(lv_identifier_0_0, grammarAccess.getBindingAccess().getIdentifierIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBindingRule());
					}
					setWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getTnTypeNameParserRuleCall_1_0());
				}
				lv_tn_1_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"tn",
						lv_tn_1_0,
						"org.xtext.trabalho.MAL.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current; }
	EOF;

// Rule TypeName
ruleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getScalarTypeParserRuleCall_0());
		}
		this_ScalarType_0=ruleScalarType
		{
			$current = $this_ScalarType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getColumnTypeParserRuleCall_1());
		}
		this_ColumnType_1=ruleColumnType
		{
			$current = $this_ColumnType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeNameAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeNameAccess().getAtAnyTypeParserRuleCall_2_1_0());
					}
					lv_at_3_0=ruleAnyType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeNameRule());
						}
						set(
							$current,
							"at",
							lv_at_3_0,
							"org.xtext.trabalho.MAL.AnyType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleScalarType
entryRuleScalarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarTypeRule()); }
	iv_ruleScalarType=ruleScalarType
	{ $current=$iv_ruleScalarType.current; }
	EOF;

// Rule ScalarType
ruleScalarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getScalarTypeAccess().getColonKeyword_0());
		}
		(
			(
				lv_identifier_1_0=RULE_ID
				{
					newLeafNode(lv_identifier_1_0, grammarAccess.getScalarTypeAccess().getIdentifierIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScalarTypeRule());
					}
					setWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleColumnType
entryRuleColumnType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnTypeRule()); }
	iv_ruleColumnType=ruleColumnType
	{ $current=$iv_ruleColumnType.current; }
	EOF;

// Rule ColumnType
ruleColumnType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getColumnTypeAccess().getColonKeyword_0());
		}
		otherlv_1='BAT'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnTypeAccess().getBATKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getColumnTypeAccess().getLeftSquareBracketKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getColumnTypeAccess().getColonKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getColumnTypeAccess().getColElmTypeParserRuleCall_4());
		}
		this_ColElmType_4=ruleColElmType
		{
			$current = $this_ColElmType_4.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getColumnTypeAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleColElmType
entryRuleColElmType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColElmTypeRule()); }
	iv_ruleColElmType=ruleColElmType
	{ $current=$iv_ruleColElmType.current; }
	EOF;

// Rule ColElmType
ruleColElmType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getColElmTypeAccess().getScalarTypeParserRuleCall_0());
		}
		this_ScalarType_0=ruleScalarType
		{
			$current = $this_ScalarType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getColElmTypeAccess().getAtAnyTypeParserRuleCall_1_0());
				}
				lv_at_1_0=ruleAnyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColElmTypeRule());
					}
					set(
						$current,
						"at",
						lv_at_1_0,
						"org.xtext.trabalho.MAL.AnyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnyType
entryRuleAnyType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyTypeRule()); }
	iv_ruleAnyType=ruleAnyType
	{ $current=$iv_ruleAnyType.current; }
	EOF;

// Rule AnyType
ruleAnyType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='any'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnyTypeAccess().getAnyKeyword_0());
		}
		(
			otherlv_1='_'
			{
				newLeafNode(otherlv_1, grammarAccess.getAnyTypeAccess().get_Keyword_1_0());
			}
			(
				(
					lv_digit_2_0=RULE_ID
					{
						newLeafNode(lv_digit_2_0, grammarAccess.getAnyTypeAccess().getDigitIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnyTypeRule());
						}
						setWithLastConsumed(
							$current,
							"digit",
							lv_digit_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	iv_ruleStmt=ruleStmt
	{ $current=$iv_ruleStmt.current; }
	EOF;

// Rule Stmt
ruleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStmtAccess().getFlowParserRuleCall_0());
			}
			ruleFlow
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getStmtAccess().getVarlistParserRuleCall_1());
		}
		this_Varlist_1=ruleVarlist
		{
			$current = $this_Varlist_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getStmtAccess().getColonEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStmtAccess().getExpExprParserRuleCall_2_1_0());
					}
					lv_exp_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStmtRule());
						}
						set(
							$current,
							"exp",
							lv_exp_3_0,
							"org.xtext.trabalho.MAL.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFlow
entryRuleFlow returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFlowRule()); }
	iv_ruleFlow=ruleFlow
	{ $current=$iv_ruleFlow.current.getText(); }
	EOF;

// Rule Flow
ruleFlow returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='RETURN'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getRETURNKeyword_0());
		}
		    |
		kw='BARRIER'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getBARRIERKeyword_1());
		}
		    |
		kw='CATCH'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getCATCHKeyword_2());
		}
		    |
		kw='LEAVE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getLEAVEKeyword_3());
		}
		    |
		kw='REDO'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getREDOKeyword_4());
		}
		    |
		kw='RAISE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlowAccess().getRAISEKeyword_5());
		}
	)
;

// Entry rule entryRuleVarlist
entryRuleVarlist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarlistRule()); }
	iv_ruleVarlist=ruleVarlist
	{ $current=$iv_ruleVarlist.current; }
	EOF;

// Rule Varlist
ruleVarlist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarlistAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getVarlistAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getVarlistAccess().getVariableParserRuleCall_1_1());
			}
			this_Variable_2=ruleVariable
			{
				$current = $this_Variable_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getVarlistAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarlistAccess().getVarVariableParserRuleCall_1_2_1_0());
						}
						lv_var_4_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarlistRule());
							}
							set(
								$current,
								"var",
								lv_var_4_0,
								"org.xtext.trabalho.MAL.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getVarlistAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getVariableAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprAccess().getFcncallParserRuleCall_0());
		}
		this_Fcncall_0=ruleFcncall
		{
			$current = $this_Fcncall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAccess().getFactorParserRuleCall_1_0_0());
				}
				this_Factor_1=ruleFactor
				{
					$current = $this_Factor_1.current;
					afterParserOrEnumRuleCall();
				}
				(
					(
						lv_operator_2_0=RULE_ID
						{
							newLeafNode(lv_operator_2_0, grammarAccess.getExprAccess().getOperatorIDTerminalRuleCall_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExprRule());
							}
							setWithLastConsumed(
								$current,
								"operator",
								lv_operator_2_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getExprAccess().getFactorFactorParserRuleCall_1_1_0());
					}
					lv_factor_3_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprRule());
						}
						set(
							$current,
							"factor",
							lv_factor_3_0,
							"org.xtext.trabalho.MAL.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_literal_constant_0_0=RULE_ID
				{
					newLeafNode(lv_literal_constant_0_0, grammarAccess.getFactorAccess().getLiteral_constantIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"literal_constant",
						lv_literal_constant_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		otherlv_1='NIL'
		{
			newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getNILKeyword_1());
		}
		    |
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getFactorAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleFcncall
entryRuleFcncall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFcncallRule()); }
	iv_ruleFcncall=ruleFcncall
	{ $current=$iv_ruleFcncall.current; }
	EOF;

// Rule Fcncall
ruleFcncall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFcncallAccess().getModuleNameParserRuleCall_0());
		}
		this_ModuleName_0=ruleModuleName
		{
			$current = $this_ModuleName_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFcncallAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFcncallAccess().getNameNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFcncallRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.trabalho.MAL.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFcncallAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFcncallAccess().getArgsArgsParserRuleCall_4_0());
				}
				lv_args_4_0=ruleArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFcncallRule());
					}
					set(
						$current,
						"args",
						lv_args_4_0,
						"org.xtext.trabalho.MAL.Args");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFcncallAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleArgs
entryRuleArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgsRule()); }
	iv_ruleArgs=ruleArgs
	{ $current=$iv_ruleArgs.current; }
	EOF;

// Rule Args
ruleArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArgsAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getArgsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArgsAccess().getFactorFactorParserRuleCall_1_1_0());
					}
					lv_factor_2_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgsRule());
						}
						set(
							$current,
							"factor",
							lv_factor_2_0,
							"org.xtext.trabalho.MAL.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModuleName
entryRuleModuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleNameRule()); }
	iv_ruleModuleName=ruleModuleName
	{ $current=$iv_ruleModuleName.current; }
	EOF;

// Rule ModuleName
ruleModuleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getModuleNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getModuleNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
