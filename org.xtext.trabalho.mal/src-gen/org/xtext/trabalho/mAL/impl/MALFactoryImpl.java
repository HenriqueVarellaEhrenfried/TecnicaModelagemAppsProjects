/**
 * generated by Xtext 2.12.0
 */
package org.xtext.trabalho.mAL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.trabalho.mAL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MALFactoryImpl extends EFactoryImpl implements MALFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MALFactory init()
  {
    try
    {
      MALFactory theMALFactory = (MALFactory)EPackage.Registry.INSTANCE.getEFactory(MALPackage.eNS_URI);
      if (theMALFactory != null)
      {
        return theMALFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MALFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MALFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MALPackage.PROGRAM: return createProgram();
      case MALPackage.STATEMENT: return createStatement();
      case MALPackage.MODULE_STMT: return createModuleStmt();
      case MALPackage.INCLUDE_STMT: return createIncludeStmt();
      case MALPackage.DEFINITION: return createDefinition();
      case MALPackage.HELPINFO: return createHelpinfo();
      case MALPackage.HEADER: return createHeader();
      case MALPackage.NAME: return createName();
      case MALPackage.RESULT: return createResult();
      case MALPackage.PARAMS: return createParams();
      case MALPackage.BINDING: return createBinding();
      case MALPackage.TYPE_NAME: return createTypeName();
      case MALPackage.SCALAR_TYPE: return createScalarType();
      case MALPackage.COLUMN_TYPE: return createColumnType();
      case MALPackage.COL_ELM_TYPE: return createColElmType();
      case MALPackage.ANY_TYPE: return createAnyType();
      case MALPackage.STMT: return createStmt();
      case MALPackage.VARLIST: return createVarlist();
      case MALPackage.VARIABLE: return createVariable();
      case MALPackage.EXPR: return createExpr();
      case MALPackage.FACTOR: return createFactor();
      case MALPackage.FCNCALL: return createFcncall();
      case MALPackage.ARGS: return createArgs();
      case MALPackage.MODULE_NAME: return createModuleName();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleStmt createModuleStmt()
  {
    ModuleStmtImpl moduleStmt = new ModuleStmtImpl();
    return moduleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncludeStmt createIncludeStmt()
  {
    IncludeStmtImpl includeStmt = new IncludeStmtImpl();
    return includeStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Helpinfo createHelpinfo()
  {
    HelpinfoImpl helpinfo = new HelpinfoImpl();
    return helpinfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Header createHeader()
  {
    HeaderImpl header = new HeaderImpl();
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Params createParams()
  {
    ParamsImpl params = new ParamsImpl();
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeName createTypeName()
  {
    TypeNameImpl typeName = new TypeNameImpl();
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScalarType createScalarType()
  {
    ScalarTypeImpl scalarType = new ScalarTypeImpl();
    return scalarType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColumnType createColumnType()
  {
    ColumnTypeImpl columnType = new ColumnTypeImpl();
    return columnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColElmType createColElmType()
  {
    ColElmTypeImpl colElmType = new ColElmTypeImpl();
    return colElmType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnyType createAnyType()
  {
    AnyTypeImpl anyType = new AnyTypeImpl();
    return anyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stmt createStmt()
  {
    StmtImpl stmt = new StmtImpl();
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Varlist createVarlist()
  {
    VarlistImpl varlist = new VarlistImpl();
    return varlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Factor createFactor()
  {
    FactorImpl factor = new FactorImpl();
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fcncall createFcncall()
  {
    FcncallImpl fcncall = new FcncallImpl();
    return fcncall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Args createArgs()
  {
    ArgsImpl args = new ArgsImpl();
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleName createModuleName()
  {
    ModuleNameImpl moduleName = new ModuleNameImpl();
    return moduleName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MALPackage getMALPackage()
  {
    return (MALPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MALPackage getPackage()
  {
    return MALPackage.eINSTANCE;
  }

} //MALFactoryImpl
