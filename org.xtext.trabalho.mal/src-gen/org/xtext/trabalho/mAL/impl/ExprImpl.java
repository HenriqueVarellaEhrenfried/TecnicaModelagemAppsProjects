/**
 * generated by Xtext 2.12.0
 */
package org.xtext.trabalho.mAL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.trabalho.mAL.Expr;
import org.xtext.trabalho.mAL.Factor;
import org.xtext.trabalho.mAL.MALPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.trabalho.mAL.impl.ExprImpl#getLeft_factor <em>Left factor</em>}</li>
 *   <li>{@link org.xtext.trabalho.mAL.impl.ExprImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.trabalho.mAL.impl.ExprImpl#getRight_factor <em>Right factor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprImpl extends MinimalEObjectImpl.Container implements Expr
{
  /**
   * The cached value of the '{@link #getLeft_factor() <em>Left factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_factor()
   * @generated
   * @ordered
   */
  protected Factor left_factor;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight_factor() <em>Right factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_factor()
   * @generated
   * @ordered
   */
  protected Factor right_factor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MALPackage.Literals.EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Factor getLeft_factor()
  {
    return left_factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_factor(Factor newLeft_factor, NotificationChain msgs)
  {
    Factor oldLeft_factor = left_factor;
    left_factor = newLeft_factor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MALPackage.EXPR__LEFT_FACTOR, oldLeft_factor, newLeft_factor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft_factor(Factor newLeft_factor)
  {
    if (newLeft_factor != left_factor)
    {
      NotificationChain msgs = null;
      if (left_factor != null)
        msgs = ((InternalEObject)left_factor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MALPackage.EXPR__LEFT_FACTOR, null, msgs);
      if (newLeft_factor != null)
        msgs = ((InternalEObject)newLeft_factor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MALPackage.EXPR__LEFT_FACTOR, null, msgs);
      msgs = basicSetLeft_factor(newLeft_factor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MALPackage.EXPR__LEFT_FACTOR, newLeft_factor, newLeft_factor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MALPackage.EXPR__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Factor getRight_factor()
  {
    return right_factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_factor(Factor newRight_factor, NotificationChain msgs)
  {
    Factor oldRight_factor = right_factor;
    right_factor = newRight_factor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MALPackage.EXPR__RIGHT_FACTOR, oldRight_factor, newRight_factor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight_factor(Factor newRight_factor)
  {
    if (newRight_factor != right_factor)
    {
      NotificationChain msgs = null;
      if (right_factor != null)
        msgs = ((InternalEObject)right_factor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MALPackage.EXPR__RIGHT_FACTOR, null, msgs);
      if (newRight_factor != null)
        msgs = ((InternalEObject)newRight_factor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MALPackage.EXPR__RIGHT_FACTOR, null, msgs);
      msgs = basicSetRight_factor(newRight_factor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MALPackage.EXPR__RIGHT_FACTOR, newRight_factor, newRight_factor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MALPackage.EXPR__LEFT_FACTOR:
        return basicSetLeft_factor(null, msgs);
      case MALPackage.EXPR__RIGHT_FACTOR:
        return basicSetRight_factor(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MALPackage.EXPR__LEFT_FACTOR:
        return getLeft_factor();
      case MALPackage.EXPR__OPERATOR:
        return getOperator();
      case MALPackage.EXPR__RIGHT_FACTOR:
        return getRight_factor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MALPackage.EXPR__LEFT_FACTOR:
        setLeft_factor((Factor)newValue);
        return;
      case MALPackage.EXPR__OPERATOR:
        setOperator((String)newValue);
        return;
      case MALPackage.EXPR__RIGHT_FACTOR:
        setRight_factor((Factor)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MALPackage.EXPR__LEFT_FACTOR:
        setLeft_factor((Factor)null);
        return;
      case MALPackage.EXPR__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case MALPackage.EXPR__RIGHT_FACTOR:
        setRight_factor((Factor)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MALPackage.EXPR__LEFT_FACTOR:
        return left_factor != null;
      case MALPackage.EXPR__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case MALPackage.EXPR__RIGHT_FACTOR:
        return right_factor != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //ExprImpl
