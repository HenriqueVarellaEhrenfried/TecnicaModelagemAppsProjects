/*
 * generated by Xtext 2.12.0
 */
package org.xtext.trabalho.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.trabalho.services.MALGrammarAccess;

@SuppressWarnings("all")
public class MALSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MALGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ColumnType___ColonKeyword_0_BATKeyword_1_LeftSquareBracketKeyword_2_ColonKeyword_3__q;
	protected AbstractElementAlias match_Definition_FACTORYKeyword_3_0_or___UNSAFEKeyword_0_0_q_COMMANDKeyword_0_1___or___UNSAFEKeyword_1_0_q_PATTERNKeyword_1_1___or_____INLINEKeyword_2_0_0_or_UNSAFEKeyword_2_0_1__q_FUNCTIONKeyword_2_1__;
	protected AbstractElementAlias match_Stmt_FlowParserRuleCall_0_q;
	protected AbstractElementAlias match_Varlist_LeftParenthesisKeyword_1_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MALGrammarAccess) access;
		match_ColumnType___ColonKeyword_0_BATKeyword_1_LeftSquareBracketKeyword_2_ColonKeyword_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getColonKeyword_0()), new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getBATKeyword_1()), new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getLeftSquareBracketKeyword_2()), new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getColonKeyword_3()));
		match_Definition_FACTORYKeyword_3_0_or___UNSAFEKeyword_0_0_q_COMMANDKeyword_0_1___or___UNSAFEKeyword_1_0_q_PATTERNKeyword_1_1___or_____INLINEKeyword_2_0_0_or_UNSAFEKeyword_2_0_1__q_FUNCTIONKeyword_2_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getINLINEKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_2_0_1())), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getFUNCTIONKeyword_2_1())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getCOMMANDKeyword_0_1())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getDefinitionAccess().getUNSAFEKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getPATTERNKeyword_1_1())), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getFACTORYKeyword_3_0()));
		match_Stmt_FlowParserRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getStmtAccess().getFlowParserRuleCall_0());
		match_Varlist_LeftParenthesisKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getVarlistAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFlowRule())
			return getFlowToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Flow:
	 * 	'RETURN'  | 'BARRIER' | 'CATCH' | 'LEAVE' | 'REDO' | 'RAISE'
	 * ;
	 */
	protected String getFlowToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "RETURN";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ColumnType___ColonKeyword_0_BATKeyword_1_LeftSquareBracketKeyword_2_ColonKeyword_3__q.equals(syntax))
				emit_ColumnType___ColonKeyword_0_BATKeyword_1_LeftSquareBracketKeyword_2_ColonKeyword_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Definition_FACTORYKeyword_3_0_or___UNSAFEKeyword_0_0_q_COMMANDKeyword_0_1___or___UNSAFEKeyword_1_0_q_PATTERNKeyword_1_1___or_____INLINEKeyword_2_0_0_or_UNSAFEKeyword_2_0_1__q_FUNCTIONKeyword_2_1__.equals(syntax))
				emit_Definition_FACTORYKeyword_3_0_or___UNSAFEKeyword_0_0_q_COMMANDKeyword_0_1___or___UNSAFEKeyword_1_0_q_PATTERNKeyword_1_1___or_____INLINEKeyword_2_0_0_or_UNSAFEKeyword_2_0_1__q_FUNCTIONKeyword_2_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Stmt_FlowParserRuleCall_0_q.equals(syntax))
				emit_Stmt_FlowParserRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Varlist_LeftParenthesisKeyword_1_0_q.equals(syntax))
				emit_Varlist_LeftParenthesisKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (':' 'BAT' '[' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ':' identifier=ID
	 */
	protected void emit_ColumnType___ColonKeyword_0_BATKeyword_1_LeftSquareBracketKeyword_2_ColonKeyword_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'FACTORY' | ('UNSAFE'? 'COMMAND') | ('UNSAFE'? 'PATTERN') | (('INLINE' | 'UNSAFE')? 'FUNCTION')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) id=ID
	 *     (rule start) (ambiguity) mn+=ModuleName
	 */
	protected void emit_Definition_FACTORYKeyword_3_0_or___UNSAFEKeyword_0_0_q_COMMANDKeyword_0_1___or___UNSAFEKeyword_1_0_q_PATTERNKeyword_1_1___or_____INLINEKeyword_2_0_0_or_UNSAFEKeyword_2_0_1__q_FUNCTIONKeyword_2_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Flow?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '('? identifier=ID
	 */
	protected void emit_Stmt_FlowParserRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) identifier=ID
	 *     (rule start) Flow? (ambiguity) identifier=ID
	 */
	protected void emit_Varlist_LeftParenthesisKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
