/*
 * generated by Xtext 2.12.0
 */
package org.xtext.trabalho.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.trabalho.ide.contentassist.antlr.internal.InternalMALParser;
import org.xtext.trabalho.services.MALGrammarAccess;

public class MALParser extends AbstractContentAssistParser {

	@Inject
	private MALGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMALParser createParser() {
		InternalMALParser result = new InternalMALParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getModuleStmtAccess().getAlternatives(), "rule__ModuleStmt__Alternatives");
					put(grammarAccess.getIncludeStmtAccess().getAlternatives(), "rule__IncludeStmt__Alternatives");
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getDefinitionAccess().getAlternatives_2_0(), "rule__Definition__Alternatives_2_0");
					put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
					put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
					put(grammarAccess.getColElmTypeAccess().getAlternatives(), "rule__ColElmType__Alternatives");
					put(grammarAccess.getFlowAccess().getAlternatives(), "rule__Flow__Alternatives");
					put(grammarAccess.getVarlistAccess().getAlternatives(), "rule__Varlist__Alternatives");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
					put(grammarAccess.getLiteral_constantAccess().getAlternatives(), "rule__Literal_constant__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getModuleStmtAccess().getGroup_0(), "rule__ModuleStmt__Group_0__0");
					put(grammarAccess.getModuleStmtAccess().getGroup_1(), "rule__ModuleStmt__Group_1__0");
					put(grammarAccess.getModuleStmtAccess().getGroup_1_2(), "rule__ModuleStmt__Group_1_2__0");
					put(grammarAccess.getIncludeStmtAccess().getGroup_0(), "rule__IncludeStmt__Group_0__0");
					put(grammarAccess.getIncludeStmtAccess().getGroup_1(), "rule__IncludeStmt__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_0(), "rule__Definition__Group_0__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_2(), "rule__Definition__Group_2__0");
					put(grammarAccess.getDefinitionAccess().getGroup_3(), "rule__Definition__Group_3__0");
					put(grammarAccess.getHelpinfoAccess().getGroup(), "rule__Helpinfo__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getNameAccess().getGroup_0(), "rule__Name__Group_0__0");
					put(grammarAccess.getResultAccess().getGroup_1(), "rule__Result__Group_1__0");
					put(grammarAccess.getParamsAccess().getGroup(), "rule__Params__Group__0");
					put(grammarAccess.getParamsAccess().getGroup_1(), "rule__Params__Group_1__0");
					put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
					put(grammarAccess.getTypeNameAccess().getGroup_2(), "rule__TypeName__Group_2__0");
					put(grammarAccess.getScalarTypeAccess().getGroup(), "rule__ScalarType__Group__0");
					put(grammarAccess.getColumnTypeAccess().getGroup(), "rule__ColumnType__Group__0");
					put(grammarAccess.getAnyTypeAccess().getGroup(), "rule__AnyType__Group__0");
					put(grammarAccess.getAnyTypeAccess().getGroup_1(), "rule__AnyType__Group_1__0");
					put(grammarAccess.getStmtAccess().getGroup(), "rule__Stmt__Group__0");
					put(grammarAccess.getStmtAccess().getGroup_2(), "rule__Stmt__Group_2__0");
					put(grammarAccess.getVarlistAccess().getGroup_1(), "rule__Varlist__Group_1__0");
					put(grammarAccess.getVarlistAccess().getGroup_1_2(), "rule__Varlist__Group_1_2__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getExprAccess().getGroup_1_0(), "rule__Expr__Group_1_0__0");
					put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
					put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
					put(grammarAccess.getFcncallAccess().getGroup(), "rule__Fcncall__Group__0");
					put(grammarAccess.getArgsAccess().getGroup(), "rule__Args__Group__0");
					put(grammarAccess.getArgsAccess().getGroup_1(), "rule__Args__Group_1__0");
					put(grammarAccess.getBteAccess().getGroup(), "rule__Bte__Group__0");
					put(grammarAccess.getFLTAccess().getGroup(), "rule__FLT__Group__0");
					put(grammarAccess.getProgramAccess().getElementsAssignment_0(), "rule__Program__ElementsAssignment_0");
					put(grammarAccess.getStatementAccess().getHelpAssignment_0_1(), "rule__Statement__HelpAssignment_0_1");
					put(grammarAccess.getStatementAccess().getHelpAssignment_1_1(), "rule__Statement__HelpAssignment_1_1");
					put(grammarAccess.getModuleStmtAccess().getIdentAssignment_0_1(), "rule__ModuleStmt__IdentAssignment_0_1");
					put(grammarAccess.getModuleStmtAccess().getIdentAssignment_1_1(), "rule__ModuleStmt__IdentAssignment_1_1");
					put(grammarAccess.getModuleStmtAccess().getSecond_identAssignment_1_2_1(), "rule__ModuleStmt__Second_identAssignment_1_2_1");
					put(grammarAccess.getIncludeStmtAccess().getIdentifierAssignment_0_1(), "rule__IncludeStmt__IdentifierAssignment_0_1");
					put(grammarAccess.getIncludeStmtAccess().getString_literalAssignment_1_1(), "rule__IncludeStmt__String_literalAssignment_1_1");
					put(grammarAccess.getDefinitionAccess().getHeaderAssignment_0_2(), "rule__Definition__HeaderAssignment_0_2");
					put(grammarAccess.getDefinitionAccess().getIdentifierAssignment_0_4(), "rule__Definition__IdentifierAssignment_0_4");
					put(grammarAccess.getDefinitionAccess().getHeaderAssignment_1_2(), "rule__Definition__HeaderAssignment_1_2");
					put(grammarAccess.getDefinitionAccess().getIdentifierAssignment_1_4(), "rule__Definition__IdentifierAssignment_1_4");
					put(grammarAccess.getDefinitionAccess().getHeaderAssignment_2_2(), "rule__Definition__HeaderAssignment_2_2");
					put(grammarAccess.getDefinitionAccess().getStatementsAssignment_2_3(), "rule__Definition__StatementsAssignment_2_3");
					put(grammarAccess.getDefinitionAccess().getFunction_nameAssignment_2_5(), "rule__Definition__Function_nameAssignment_2_5");
					put(grammarAccess.getDefinitionAccess().getHeaderAssignment_3_1(), "rule__Definition__HeaderAssignment_3_1");
					put(grammarAccess.getDefinitionAccess().getStatementsAssignment_3_2(), "rule__Definition__StatementsAssignment_3_2");
					put(grammarAccess.getDefinitionAccess().getFactory_nameAssignment_3_4(), "rule__Definition__Factory_nameAssignment_3_4");
					put(grammarAccess.getHelpinfoAccess().getString_literalAssignment_1(), "rule__Helpinfo__String_literalAssignment_1");
					put(grammarAccess.getHeaderAccess().getHeader_nameAssignment_0(), "rule__Header__Header_nameAssignment_0");
					put(grammarAccess.getHeaderAccess().getParamsAssignment_2(), "rule__Header__ParamsAssignment_2");
					put(grammarAccess.getHeaderAccess().getReturn_typeAssignment_4(), "rule__Header__Return_typeAssignment_4");
					put(grammarAccess.getNameAccess().getMnAssignment_0_0(), "rule__Name__MnAssignment_0_0");
					put(grammarAccess.getNameAccess().getIdAssignment_1(), "rule__Name__IdAssignment_1");
					put(grammarAccess.getParamsAccess().getBindAssignment_0(), "rule__Params__BindAssignment_0");
					put(grammarAccess.getParamsAccess().getBindAssignment_1_1(), "rule__Params__BindAssignment_1_1");
					put(grammarAccess.getBindingAccess().getIdentifierAssignment_0(), "rule__Binding__IdentifierAssignment_0");
					put(grammarAccess.getBindingAccess().getTypeAssignment_1(), "rule__Binding__TypeAssignment_1");
					put(grammarAccess.getScalarTypeAccess().getIdentifierAssignment_1(), "rule__ScalarType__IdentifierAssignment_1");
					put(grammarAccess.getAnyTypeAccess().getTypeAssignment_0(), "rule__AnyType__TypeAssignment_0");
					put(grammarAccess.getAnyTypeAccess().getDigitAssignment_1_1(), "rule__AnyType__DigitAssignment_1_1");
					put(grammarAccess.getStmtAccess().getFlowAssignment_0(), "rule__Stmt__FlowAssignment_0");
					put(grammarAccess.getStmtAccess().getList_of_variablesAssignment_1(), "rule__Stmt__List_of_variablesAssignment_1");
					put(grammarAccess.getStmtAccess().getExpAssignment_2_1(), "rule__Stmt__ExpAssignment_2_1");
					put(grammarAccess.getVarlistAccess().getVariablesAssignment_0(), "rule__Varlist__VariablesAssignment_0");
					put(grammarAccess.getVarlistAccess().getVariablesAssignment_1_1(), "rule__Varlist__VariablesAssignment_1_1");
					put(grammarAccess.getVarlistAccess().getVariablesAssignment_1_2_1(), "rule__Varlist__VariablesAssignment_1_2_1");
					put(grammarAccess.getVariableAccess().getIdentifierAssignment(), "rule__Variable__IdentifierAssignment");
					put(grammarAccess.getExprAccess().getLeft_factorAssignment_1_0_0(), "rule__Expr__Left_factorAssignment_1_0_0");
					put(grammarAccess.getExprAccess().getOperatorAssignment_1_0_1(), "rule__Expr__OperatorAssignment_1_0_1");
					put(grammarAccess.getExprAccess().getRight_factorAssignment_1_1(), "rule__Expr__Right_factorAssignment_1_1");
					put(grammarAccess.getFcncallAccess().getModuleAssignment_0(), "rule__Fcncall__ModuleAssignment_0");
					put(grammarAccess.getFcncallAccess().getFunction_nameAssignment_2(), "rule__Fcncall__Function_nameAssignment_2");
					put(grammarAccess.getFcncallAccess().getArgsAssignment_4(), "rule__Fcncall__ArgsAssignment_4");
					put(grammarAccess.getArgsAccess().getFactor1Assignment_1_1(), "rule__Args__Factor1Assignment_1_1");
					put(grammarAccess.getModuleNameAccess().getIdentifierAssignment(), "rule__ModuleName__IdentifierAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MALGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MALGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
